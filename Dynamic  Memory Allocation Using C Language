NAME-DIGHE AMIT BALASAHEB
1.Write a c program to accept Elements from user and print as it is
#include<stdio.h>
#include<stdlib.h>
void main()
{
int n, i;
int* p;
printf("Enter Size of You want:");
scanf_s("%d", &n);
p = (int*)malloc(n * sizeof(int));
printf("Enter Many Elements Are You Want: ");
for (i = 0; i < n; i++)
{
scanf_s("%d", p + i);
}
printf("Elements are:\n");
for (i = 0; i < n; i++)
{
printf("%d\n", *(p + i));
}
}

2.write a c program to to search enter element in an array
#include<stdio.h>
#include<stdlib.h>
void main()
{
int i, n, search, flag = 0;
int* p;
printf("Enter the Elments are you want:");
scanf_s("%d", &n);
p = (int*)malloc(n * sizeof(int));
printf("Array elements are\n");
for (i = 0; i < n; i++)
{
scanf_s("%d", p + i);
}
printf("array elements are\n");
for (i = 0; i < n; i++)
{
printf("%d\n", *(p + i));
}
printf("Enter the Search element ");
scanf_s("%d", &search);
for (i = 0; i < n; i++)
if (search == *(p + i))
{
printf("\n %d is Number found\n", search);
}
else
{
printf(" Number is not found\n");
}
}

1.C program to sum of array elements using dynamic memory allocation
#include<stdio.h>
#include<stdlib.h>
void main()
{
int i, n, sum;
int* p;
printf("enter size of array\n");
scanf_s("%d", &n);
p = (int*)malloc(n * sizeof(int));
printf("array elements are\n");
for (i = 0; i < n; i++)
{
scanf_s("%d", p + i);
}
sum = 0;
for (i = 0; i < n; i++)
{
sum = sum + *(p + i);
}
printf("sum:%d\n", sum);
}

3. Write a C program to accept string with multiple spaces from user and print
as it is. (Using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str = NULL;
char ch;
int i = 0, size = 1;
str = (char*)malloc(sizeof(char));
*str = '\0';
printf("Enter the string..\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str = (char*)realloc(str, size * sizeof(char));
*(str + i) = ch;
*(str + i + 1) = '\0';
i++;
}
} while (ch != '\n');
printf("The string is :%s", str);
}

3. Write a C program to accept string with multiple spaces from user and print
it with a sinlge space as a delimiter. (Using Dynamic Memory Allocation)
#include <stdio.h>
#include<stdlib.h>
void main()
{
char* p = NULL, choice;
int i, count, flag = 0;
p = (char*)malloc(sizeof(char));
*(p + 0) = '\0';
i = 0;
count = 1;
printf("enter string\n");
do
{
scanf_s("%c", &choice);
if (choice != '\n')
{
count++;
p = (char*)realloc(p, count * sizeof(char));
*(p + i) = choice;
*(p + i + 1) = '\0';
}
i++;
} while (choice != '\n');
i = 0;
while (*(p + i) != '\0')
{
while (*(p + i) == '_')
{
i++;
}
if (*(p + i) != '_' && *(p + i) != '\0')
{
flag++;
if (flag == 1);
else
{
printf("_");
}
}
while (*(p + i) != '_' && *(p + i) != '\0')
{
printf("%c", *(p + i));
i++;
}
}
}

4.C program to find position of palindrome no using dynamic memory allocation
#include<stdio.h>
#include<stdlib.h>
void main()
{
int* p;
int n, num, rev, rem, i;
printf("enter size of array\n");
scanf_s("%d", &n);
p = (int*)malloc(n * sizeof(int));
printf("enter no\n");
for (i = 0; i < n; i++)
{
scanf_s("%d", p + i);
}
for (i = 0; i < n; i++)
{
rev = 0;
rem = 0;
num = *(p + i);
while (*(p + i) != 0)
{
rem = *(p + i) % 10;
rev = rev * 10;
rev = rev + rem;
*(p + i) = *(p + i) / 10;
}
if (num == rev)
{
printf(" %d palindrome no is on index %d\n", num, i);
}
}
}

5.C program to sort 1 st half element in assending order and 2
nd half element in desending order
#include<stdio.h>
#include<stdlib.h>
void main()
{
int* p;
int n, i, med, temp, j;
printf("enter array size\n");
scanf_s("%d", &n);
p = (int*)malloc(n * sizeof(int));
printf("array elemnts are");
for (i = 0; i < n; i++)
{
scanf_s("%d", p + i);
}
med = n / 2;
for (i = 0; i < med - 1; i++)
{
for (j = i + 1; j < med; j++)
{
if (*(p + i) > *(p + j))
{
temp = *(p + j);
{
temp = *(p + i);
*(p + i) = *(p + j);
*(p + j) = temp;
}
}
}
//logic for sort second half in desendig order
for (i = med; i < n - 1; i++)
{
for (j = i + 1; j < n; j++)
{
if (*(p + i) < *(p + j))
{
temp = *(p + i);
*(p + i) = *(p + j);
*(p + j) = temp;
}
}
}
printf("after sorting\n");
for(i = 0; i < n; i++)
{
printf("%d\n", *(p + i));
}
}
}

6. Write a C program to print count of number characters in given string.
(Using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* p = NULL, choice;
int i, count;
p = (char*)malloc(sizeof(char));
*(p + 0) = '\0';
i = 0;
count = 1;
printf("enter string\n");
do
{
scanf_s("%c", &choice);
if (choice != '\n')
{
count++;
p = (char*)realloc(p, count * sizeof(char));
*(p + i) = choice;
*(p + i + 1) = '\0';
}
i++;
} while (choice != '\n');
i = 0;
count = 0;
while (*(p + i) != '\0')
{
if (*(p + i) >= 'a' && *(p + i) <= 'z' || *(p + i) >= 'A' && *(p + i) <= 'Z')
{
count++;
}
i++;
}
printf("\n no of character in given string=%d", count);
}

7. Write a C program to accept string and print it in the reverse order. (Using
Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
int n, i;
int* p;
printf("Enter how many elements you want to insert: ");
scanf_s("%d", &n);
p = (int*)malloc(n * sizeof(int));
i = 0;
printf("\nEnter Array elements\n");
while (i < n)
{
scanf_s("%d", (p + i));
i++;
}
printf("\nArray elements in reversed order\n");
while (i >= 0)
{
printf(" %d\n", *(p + i));
i--;
}
}

8. Write a C program to copy the elements of one array into another
array. (Using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
int* p, * p1;
int n, i;
printf("enter size of array");
scanf_s("%d", &n);
p = (int*)malloc(n * sizeof(int));
p1 = (int*)malloc(n * sizeof(int));
printf("enter array elements\n");
for (i = 0; i < n; i++)
{
scanf_s("%d", p + i);
}
for (i = 0; i < n; i++)
{
*(p1 + i) = *(p + i);
}
printf("B array elements are\n");
for (i = 0; i < n; i++)
{
printf("%d\n", *(p1 + i));
}
}

9. Write a C program to count count of number of vowels and number of
consonants in the given string. (Using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
int main()
{
int vowels = 0, consonants = 0, i = 0;
char* str = NULL;
char ch;
int no_of_char = 1;
str = (char*)malloc(sizeof(char));
*(str + 0) = '\0';
printf("enter the string:\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
no_of_char++;
str = (char*)realloc(str, no_of_char * sizeof(char));
*(str + i) = ch;
*(str + i + 1) = '\0';
i++;
}
} while (ch != '\n');
i = 0;
while ((str + i) != '\0' && (str + i) != '\n')
{
if ((str + i) == 'a' || (str + i) == 'e' || (str + i) == 'i' || (str + i) == 'o' || (str + i) == 'u' || 
(str + i) == 'A' || (s
tr + i) == 'E' || (str + i) == 'I' || (str + i) == 'O' || (str + i) == 'U')
vowels++;
else
{
consonants++;
}
i++;
}
printf("%d\n", vowels);
printf("%d\n", consonants);
free(str);
}

10. Write a C program to reverse a given string as below. (Using Dynamic
Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str = NULL;
str = (char*)malloc(sizeof(char));
*str = '\0';
int i = 0, size = 0;
char ch;
printf("Enter the string to reverse ..\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str = (char*)realloc(str, size * sizeof(char));
*(str + i) = ch;
*(str + i + 1) = '\0';
i++;
}
} while (ch != '\n');
printf("The string is :%s\n", str);
i = 0;
int j;
while (*(str + i) != '\0')
{
while (*(str + i) == ' ')
{
i++;
}
while (*(str + i) != ' ' && *(str + i) != '\0')
{
i++;
}
j = i - 1;
while (*(str + j) != ' ' && j >= 0)
{
printf("%c", *(str + j));
j--;
}
if (*(str + i) == ' ')
{
printf(" ");
i++;
}
while (*(str + i) == ' ')
{
i++;
}
}
}

11. Write a C program to sort only even numbers in given array.
(Using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
int n, i, j, temp;
int* p;
printf("enter array size\n");
scanf_s("%d", &n);
p = (int*)malloc(n * sizeof(int));
printf("enter array elements");
for (i = 0; i < n; i++)
{
scanf_s("%d", p + i);
}
for (i = 0; i < n; i++)
{
printf("%d\n", *p + i);
}
for (i = 0; i < n - 1; i++)
{
for (j = i + 1; j < n; j++)
{
if (*(p + i) % 2 == 0 && *(p + j) % 2 == 0 && *(p + i) > *(p + j))
{
temp = *(p + i);
*(p + i) = *(p + j);
*(p + j) = temp;
}
}
}
printf("after sorting\n");
for (i = 0; i < n - 1; i++)
{
printf("%d\n", *(p + i));
}
}

12. Write a C program to replace space with ‘$’ in given string. (Using
Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str = NULL;
str = (char*)malloc(sizeof(char));
*str = '\0';
int i = 0, size = 0;
char ch;
printf("Enter the string to print $ instead of spaces ...\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str = (char*)realloc(str, size * sizeof(char));
*(str + i) = ch;
*(str + i + 1) = '\0';
i++;
}
} while (ch != '\n');
printf("The string is :%s\n", str);
i = 0;
while (*(str + i) != '\0')
{
if (*(str + i) == ' ')
{
printf("$");
i++;
}
if (*(str + i) != ' ' && *(str + i) != '\0')
{
printf("%c", *(str + i));
i++;
}
}
}

13. Write a program in C to separate odd and even integers in
same array. (Using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
int even = 0, odd = 0, i, n;
int* p;
printf("enter size of array\n");
scanf_s("%d", &n);
p = (int*)malloc(n * sizeof(int));
printf("enter array element\n");
for (i = 0; i < n; i++)
{
scanf_s("%d", p + i);
}
for (i = 0; i < n; i++)
{
if (*(p + i) % 2 == 0)
{
printf("%d\t", *(p + i));
}
}
for (i = 0; i < n; i++)
{
if (*(p + i) % 2 != 0)
{
printf("%d\t", *(p + i));
}
}
}

14. Write a program which accept sentence from user and print number of
words from that sentence. (Using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* p = NULL, choice;
int i, count;
p = (char*)malloc(sizeof(char));
*(p + 0) = '\0';
i = 0;
count = 1;
printf("enter string\n");
do
{
scanf_s("%c", &choice);
if (choice != '\n')
{
count++;
p = (char*)realloc(p, count * sizeof(char));
*(p + i) = choice;
*(p + i + 1) = '\0';
}
i++;
} while (choice != '\n');
i = 0;
count = 0;
while (*(p + i) != '\0')
{
if (*(p + i) >= 'a' && *(p + i) <= 'z' || *(p + i) >= 'A' && *(p + i) <= 'Z')
{
count++;
}
i++;
}
printf("\n no of character in given string=%d", count);
}

15. Write a program in C to print all unique elements in an array.
(Using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
int* p;
int i, j, n, count;
printf("enter size of array\n");
scanf_s("%d", &n);
p = (int*)malloc(n * sizeof(int));
printf("enter array elemnts\n");
for (i = 0; i < n; i++)
{
scanf_s("%d", p + i);
}
for (i = 0; i < n; i++)
{
count = 0;
for (j = 0; j < n; j++)
{
if (*(p + i) == *(p + j))
{
count++;
}
}
if (count == 1)
{
printf("unique element:%d\n", *(p + i));
}
}
}

16. Write a C program to replace Good names in mail.
#include<stdio.h>
#include<stdlib.h>
int main()
{
char* str = NULL;
char ch;
int i = 0;
int no_of_char = 1;
str = (char*)malloc(sizeof(char));
*(str + 0) = '\0 ';
printf("enter a string: ");
do {
scanf_s("%c", &ch);
if (ch != '\n')
{
no_of_char++;
str = (char*)realloc(str, no_of_char * sizeof(char));
*(str + i) = ch;
*(str + i + 1) = '\0';
i++;
}
} while (ch != '\n');
printf("Hello ");
for (i = 0; *(str + i) != '\0'; i++)
{
if (*(str + i) != ' ')
{
printf("%c", *(str + i));
}
else
{
}
}
}

17.Write a program in c insert New value in the array(sorted list).(Using Dynamic Memory 
Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
int n, i = 0, j = 0, null, n1, temp;
int* p = NULL;
printf("please enter elements you want?\n");
scanf_s("%d", &n);
p = (int*)malloc(n * sizeof(int));
printf("please enter array elements\n");
for (i = 0; i < n; i++)
{
scanf_s("%d", p + i);
}
for (i = 0; i < n; i++)
{
for (j = 0; j < n; j++)
{
if (*(p + i) < *(p + j))
{
temp = *(p + i);
*(p + i) = *(p + j);
*(p + j) = temp;
}
}
}
printf("enter number you want to insert?\n");
scanf_s("%d", &n1);
for (i = 0; i < n; i++)
{
if (*(p + i) > n1)
{
temp = i;
break;
}
}
for (i = n; i >= temp; i--)
{
*(p + i) = *(p + i - 1);
if (i == temp)
{
*(p + i) = n1;
}
}
printf("array after insertion of elements are:\n");
for (i = 0; i <= n; i++)
{
printf("%d\n", *(p + i));
}
}

18. Write a C program to print all fibonacci series upto each ascii code of alphabets in given 
string(Using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str = NULL;
str = (char*)malloc(sizeof(char));
*str = '\0';
int i = 0, size = 0;
char ch;
printf("Enter the string to print fibonacci series!\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str = (char*)realloc(str, size * sizeof(char));
*(str + i) = ch;
*(str + i + 1) = '\0';
i++;
}
} while (ch != '\n');
printf("The string is :%s\n", str);
i = 0;
int n, j, temp1 = 0, temp2 = 1, temp3 = 0;
while (*(str + i) != '\0')
{
temp1 = 0, temp2 = 1, temp3 = 0;
n = *(str + i);
for (j = 1; j <= n; j++)
{
temp3 = temp1 + temp2;
printf("%d ", temp3);
temp1 = temp2;
temp2 = temp3;
}
printf("\n\n");
i++;
}
}

19.Write a program in c to delete an elements at desired position from an array.(Using Dynamic 
Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
int n, i = 0, j = 0, null, del, temp = 0;
int* p = NULL;
printf("please enter elements you want?\n");
scanf_s("%d", &n);
p = (int*)malloc(n * sizeof(int));
for (i = 0; i < n; i++)
{
printf("please enter array elements at index %d\n", i);
scanf_s("%d", p + i);
}
printf("enter number you want to delete?\n");
scanf_s("%d", &del);
if (del >= 0 && del < n)
{
for (i = del; i < n; i++)
{
*(p + i) = *(p + i + 1);
}
printf("array after delete of elements are:\n");
for (i = 0; i < n - 1; i++)
{
printf("%d\n", *(p + i));
}
}
else
{
printf("position is invalid");
}
}

20.Write a C program which accepts a string from user which contains a characters from 'b'to 
'y'.Dyanamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str = NULL;
char ch;
int i = 0, n;
int size = 1;
int count = 0;
int n1 = 0, n2 = 1, n3;
str = (char*)malloc(sizeof(char));
*str = '\0';
printf("Please enter the string:\n");
do {
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str = (char*)realloc(str, size * sizeof(char));
*(str + i) = ch;
*(str + i + 1) = '\n';
i++;
}
} while (ch != '\n');
printf("The given string is:\n");
printf("%s", str);
printf("The characters from 'b' to 'y':\n");
i = 0;
while (*(str + i) != '\n')
{
while (*(str + i) == ' ')
{
i++;
}
while (*(str + i) != ' ' && *(str + i) != '\n')
{
if (*(str + i) > 'b' && *(str + i) < 'y')
{
printf("%c", *(str + i));
}
i++;
}
if (*(str + i + 1) == ' ')
{
printf(" ");
}
}
}

21.Write a C program which accept sentence from user and print number of small 
letters,capitals(using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str = NULL;
char ch;
int i = 0;
int size = 1;
int capital = 0, small = 0, space = 0;
str = (char*)malloc(sizeof(char));
*str = '\0';
printf("Please enter the string:\n");
do {
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str = (char*)realloc(str, size * sizeof(char));
*(str + i) = ch;
*(str + i + 1) = '\n';
i++;
}
} while (ch != '\n');
printf("The given string is:\n");
printf("%s", str);
i = 0;
while (*(str + i) != '\n')
{
if (*(str + i) >= 'A' && *(str + i) <= 'Z')
{
capital++;
}
else if (*(str + i) >= 'a' && *(str + i) <= 'z')
{
small++;
}
else if (*(str + i) == ' ')
{
space++;
}
i++;
}
printf("The capital letters are:\n");
printf("%d\n", capital);
printf("The small letters are:\n");
printf("%d\n", small);
printf("The spaces are:\n");
printf("%d\n", space);
}

22. Write a program in C to find the maximum / minimum element in an array. (Using Dynamic 
Memory Allocation)

23.Write a C program which accept sentence from user and print number of white spaces from 
that sentence. (Using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str = NULL;
int i = 0, size = 1;
char ch;
str = (char*)malloc(sizeof(char));
*str = '\0';
printf("Enter the string..!\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str = (char*)realloc(str, size * sizeof(char));
*(str + i) = ch;
*(str + i + 1) = '\0';
i++;
}
} while (ch != '\n');
printf("The string is :%s\n", str);
i = 0;
int counts = 0;
while (*(str + i) != '\0')
{
if (*(str + i) == ' ')
{
counts++;
}
i++;
}
printf("The spaces in the string are :%d", counts);
}

24. Write a program in C to find the second largest element in an array. (Using Dynamic Memory 
Allocation)

25.Write a C program which accept sentence from user and print number of words of even and 
odd length from that sentence. (Using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str = NULL;
int i = 0, size = 1;
char ch;
str = (char*)malloc(sizeof(char));
*str = '\0';
printf("Enter the string..!\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str = (char*)realloc(str, size * sizeof(char));
*(str + i) = ch;
*(str + i + 1) = '\0';
i++;
}
} while (ch != '\n');
printf("The string is :%s\n", str);
i = 0;
int count = 0, countw = 0, counte = 0, counto = 0;
while (*(str + i) != 0)
{
count = 0;
while (*(str + i) != ' ' && *(str + i) != '\0')
{
count++;
i++;
}
if (count % 2 == 0)
{
if (count > 0)
{
counte++;
}
}
if (count % 2 != 0)
{
counto++;
}
if (*(str + i) == '\0')
{
break;
}
i++;
}
printf("Even words :%d\n", counte);
printf("Odd words :%d", counto);
}

26. Write a C Program to Find the Number of Elements in an Array(Using Dynamic Memory 
Allocation)
27.Write a C program which accept sentence from user and print last word from that sentence. 
(Using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str = NULL;
int i = 0, size = 1;
char ch;
str = (char*)malloc(sizeof(char));
*str = '\0';
printf("Enter the string..!\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str = (char*)realloc(str, size * sizeof(char));
*(str + i) = ch;
*(str + i + 1) = '\0';
i++;
}
} while (ch != '\n');
printf("The string is :%s\n", str);
while (*(str + i) != ' ' && i >= 0)
{
i--;
}
i++;
while (*(str + i) != '\0')
{
printf("%c", *(str + i));
i++;
}
}

28. Write a C Program to Check Array bounds while Inputing Elements into the Array(Using 
Dynamic Memory Allocation)

29.Write a C program which accept sentence from user and position from user and print the word 
at that position. (Using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str = NULL;
int i = 0, size = 1;
char ch;
str = (char*)malloc(sizeof(char));
*str = '\0';
printf("Enter the string..!\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str = (char*)realloc(str, size * sizeof(char));
*(str + i) = ch;
*(str + i + 1) = '\0';
i++;
}
} while (ch != '\n');
printf("The string is :%s\n", str);
int n;
printf("Enter the position of the word..\n");
scanf_s("%d", &n);
i = 0;
int count = 0, countw = 0;
while (*(str + i) != '\0')
{
count = 0;
if (n == 1)
{
while (*(str + i) != ' ' && *(str + i) != '\0')
{
printf("%c", *(str + i));
i++;
}
break;
}
while (*(str + i) != ' ' && *(str + i) != '\0')
{
count++;
i++;
}
if (count > 1)
{
countw++;
}
if (countw == n - 1)
{
i++;
while (*(str + i) != ' ' && *(str + i) != '\0')
{
printf("%c", *(str + i));
i++;
}
}
i++;
}
}

30. Write a C Program to Print the Alternate Elements in an Array(Using Dynamic Memory 
Allocation)
31.Write a C program to convert the string from upper case to lower case.(Using Dynamic Memory 
Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str = NULL;
int i = 0, size = 1;
char ch;
str = (char*)malloc(sizeof(char));
*str = '\0';
printf("Enter the string..!\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str = (char*)realloc(str, size * sizeof(char));
*(str + i) = ch;
*(str + i + 1) = '\0';
i++;
}
} while (ch != '\n');
printf("The string is :%s\n", str);
i = 0;
int n;
while (*(str + i) != '\0')
{
while (*(str + i) == ' ')
{
i++;
}
if (*(str + i) != ' ')
{
n = *(str + i);
}
if (n >= 65 && n <= 90)
{
n = n + 32;
}
i++;
printf("%c", n);
if (*(str + i) == ' ')
{
printf(" ");
i++;
}
}
}

32. Write a C Program to Find 2 Elements in the Array such that Difference between them is 
Largest(Using Dynamic Memory Allocation)

33.Write a C program which toggles the case of a string. (Using Dynamic Memory Allocation)
Eg:
Input String: technOrbit Infosystems
Output String: TECHNoRBIT iNFOSYSTEMS
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str = NULL;
int i = 0, size = 1;
char ch;
str = (char*)malloc(sizeof(char));
*str = '\0';
printf("Enter the string..!\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str = (char*)realloc(str, size * sizeof(char));
*(str + i) = ch;
*(str + i + 1) = '\0';
i++;
}
} while (ch != '\n');
printf("The string is :%s\n", str);
i = 0;
int n;
while (*(str + i) != '\0')
{
while (*(str + i) == ' ')
{
i++;
}
n = *(str + i);
if (n >= 97 && n <= 122)
{
n = n - 32;
}
else if (n >= 65 && n <= 90)
{
n = n + 32;
}
printf("%c", n);
i++;
if (*(str + i) == ' ')
{
printf(" ");
}
}
}

34. Write a C Program to Input a String & Store their Ascii Values in an Integer Array (Using
Dynamic Memory Allocation)

35. Write a C program to check whether given strings are Anagram strings or not. (Using Dynamic 
Memory Allocation)
Eg:
Input String1: abccd
Input String2: cbcda
Output String: Strings are anagram
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str1 = NULL;
char* str2 = NULL;
int i = 0, size1 = 1, size2 = 1;
char ch1, ch2;
str1 = (char*)malloc(sizeof(char));
str2 = (char*)malloc(sizeof(char));
*str1 = '\0';
*str2 = '\0';
printf("Enter the first string..!\n");
do
{
scanf_s("%c", &ch1);
if (ch1 != '\n')
{
size1++;
str1 = (char*)realloc(str1, size1 * sizeof(char));
*(str1 + i) = ch1;
*(str1 + i + 1) = '\0';
i++;
}
} while (ch1 != '\n');
printf("The string is :%s\n", str1);
i = 0;
//STRING 2
printf("Enter the second string..!\n");
do
{
scanf_s("%c", &ch2);
if (ch2 != '\n')
{
size2++;
str2 = (char*)realloc(str2, size2 * sizeof(char));
*(str2 + i) = ch2;
*(str2 + i + 1) = '\0';
i++;
}
} while (ch2 != '\n');
printf("The string is :%s\n", str2);
i = 0;
char temp;
int count1 = 0, count2 = 0, flag = 0, j;
while (*(str1 + i) != '\0' && *(str2 + i) != '\0')
{
count1 = 0;
count2 = 0;
temp = *(str1 + i);
j = 0;
while (*(str1 + j) != '\0')
{
if (*(str1 + j) == temp)
{
count1++;
}
j++;
}
j = 0;
while (*(str2 + j) != '\0')
{
if (*(str2 + j) == temp)
{
count2++;
}
j++;
}
if (count1 == count2)
{
i++;
}
else
{
flag = 1;
printf("the string is not anagram");
break;
}
}
if (flag == 0)
{
printf("The string is anagram");
}
}

36. Write a C program to store squares of the elements in the same array (Using Dynamic Memory 
Allocation)

37.Write a C program which accept string from user and copy that string into some another string. 
(Using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str1 = NULL;
char* str2 = NULL;
int i = 0, size1 = 1, count = 1;
char ch1, ch2;
str1 = (char*)malloc(sizeof(char));
*str1 = '\0';
printf("Enter the first string..!\n");
do
{
scanf_s("%c", &ch1);
if (ch1 != '\n')
{
size1++;
str1 = (char*)realloc(str1, size1 * sizeof(char));
*(str1 + i) = ch1;
*(str1 + i + 1) = '\0';
i++;
count++;
}
} while (ch1 != '\n');
printf("The string is :%s\n", str1);
str2 = (char*)malloc(count * sizeof(char));
i = 0;
while (*(str1 + i) != '\0')
{
*(str2 + i) = *(str1 + i);
i++;
}
*(str2 + i) = '\0';
i = 0;
while (*(str2 + i) != '\0')
{
printf("%c", *(str2 + i));
i++;
}
}

38.Write a program which accept string from user and copy first N charaters into some destination 
string. (Using Dynamic Memory Allocation)
Eg:
Input String: India is my country
Input of N: 8
Output String: India is
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str1 = NULL;
char* str2 = NULL;
int i = 0, size = 1, n, count = 0;
str1 = (char*)malloc(sizeof(char));
*str1 = '\0';
char ch;
printf("Enter the string..\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str1 = (char*)realloc(str1, size * sizeof(char));
*(str1 + i) = ch;
*(str1 + i + 1) = '\0';
i++;
count++;
}
} while (ch != '\n');
printf("The string is :%s\n", str1);
printf("Enter the no of characters..\n");
scanf_s("%d", &n);
str2 = (char*)malloc(n * sizeof(char));
i = count - n;
int j = 0;
while (*(str1 + i) != '\0')
{
*(str2 + j) = *(str1 + i);
i++;
j++;
}
*(str2 + j) = '\0';
j = 0;
while (*(str2 + j) != '\0')
{
printf("%c", *(str2 + j));
j++;
}
}

39. Write C Program to Find the two Elements such that their Sum is Closest to given 
number(Using Dynamic Memory Allocation)

40.Write a C program which accept string from user and accept number N then copy last N 
character into some another string. (Using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str1 = NULL;
char* str2 = NULL;
int i = 0, size = 1, n, count = 0;
str1 = (char*)malloc(sizeof(char));
*str1 = '\0';
char ch;
printf("Enter the string..\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str1 = (char*)realloc(str1, size * sizeof(char));
*(str1 + i) = ch;
*(str1 + i + 1) = '\0';
i++;
count++;
}
} while (ch != '\n');
printf("The string is :%s\n", str1);
printf("Enter the no of characters..\n");
scanf_s("%d", &n);
str2 = (char*)malloc(n * sizeof(char));
i = count - n;
int j = 0;
while (*(str1 + i) != '\0')
{
*(str2 + j) = *(str1 + i);
i++;
j++;
}
*(str2 + j) = '\0';
j = 0;
while (*(str2 + j) != '\0')
{
printf("%c", *(str2 + j));
j++;
}
}

41. Write C Program to Find if a given Integer X appears more than N/2 times in a Sorted Array of 
N Integers(Using Dynamic Memory Allocation)

42.Write a C program which accept two strings from user and append second string after first 
string. (Using Dynamic Memory Allocation)
Eg:
Input String: India Country
Output String: IndiaCountry
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str1 = NULL;
char* str2 = NULL;
int i = 0, size1 = 1, size2 = 1, count1 = 1, count2 = 1, n;
char ch1, ch2;
str1 = (char*)malloc(sizeof(char));
str2 = (char*)malloc(sizeof(char));
*str1 = '\0';
*str2 = '\0';
printf("Enter the first string..!\n");
do
{
scanf_s("%c", &ch1);
if (ch1 != '\n')
{
size1++;
str1 = (char*)realloc(str1, size1 * sizeof(char));
*(str1 + i) = ch1;
*(str1 + i + 1) = '\0';
i++;
count1++;
}
} while (ch1 != '\n');
printf("The string is :%s\n", str1);
i = 0;
//STRING 2
printf("Enter the second string..!\n");
do
{
scanf_s("%c", &ch2);
if (ch2 != '\n')
{
size2++;
str2 = (char*)realloc(str2, size2 * sizeof(char));
*(str2 + i) = ch2;
*(str2 + i + 1) = '\0';
i++;
count2++;
}
} while (ch2 != '\n');
printf("The string is :%s\n", str2);
n = (count1 - 1) + count2;
str1 = (char*)realloc(str1, n * sizeof(char));
int j = count1 - 1;
i = 0;
while (*(str2 + i) != '\0')
{
*(str1 + j) = *(str2 + i);
i++;
j++;
}
*(str1 + j) = '\0';
j = 0;
while (*(str1 + j) != '\0')
{
printf("%c", *(str1 + j));
j++;
}
}

43. Write C Program to Find Union & Intersection of 2 Arrays(Using Dynamic Memory 
Allocation)

44.Write a C program which accept two strings from user and append N characters of second 
string (Using Dynamic Memory Allocation) after first string.
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str1 = NULL;
char* str2 = NULL;
int i = 0, size1 = 1, size2 = 1, count1 = 1, count2 = 1, n, t;
char ch1, ch2;
str1 = (char*)malloc(sizeof(char));
str2 = (char*)malloc(sizeof(char));
*str1 = '\0';
*str2 = '\0';
printf("Enter the first string..!\n");
do
{
scanf_s("%c", &ch1);
if (ch1 != '\n')
{
size1++;
str1 = (char*)realloc(str1, size1 * sizeof(char));
*(str1 + i) = ch1;
*(str1 + i + 1) = '\0';
i++;
count1++;
}
} while (ch1 != '\n');
printf("The string is :%s\n", str1);
i = 0;
//STRING 2
printf("Enter the second string..!\n");
do
{
scanf_s("%c", &ch2);
if (ch2 != '\n')
{
size2++;
str2 = (char*)realloc(str2, size2 * sizeof(char));
*(str2 + i) = ch2;
*(str2 + i + 1) = '\0';
i++;
count2++;
}
} while (ch2 != '\n');
printf("The string is :%s\n", str2);
printf("Enter the no of characters..!\n");
scanf_s("%d", &t);
n = count1 + t;
str1 = (char*)realloc(str1, n * sizeof(char));
int j = count1 - 1;
i = 0;
while (i != t)
{
*(str1 + j) = *(str2 + i);
i++;
j++;
}
*(str1 + j) = '\0';
j = 0;
while (*(str1 + j) != '\0')
{
printf("%c", *(str1 + j));
j++;
}
}

45.Write a C program which accept two strings from user and compare two strings. If both strings 
are equal then return 0 otherwise return difference between first mismatch character. (Using 
Dynamic Memory Allocation)
Eg:
Input String1: India is my country.
Input String2: India is my country.
Output: Both strings are equal.
#include<stdio.h>
#include<stdlib.h>
void main()
{
int count1 = 0;
int count2 = 0;
char* str1 = NULL;
char* str2 = NULL;
int i = 0, size1 = 1, size2 = 1;
char ch1, ch2;
str1 = (char*)malloc(sizeof(char));
str2 = (char*)malloc(sizeof(char));
*str1 = '\0';
*str2 = '\0';
printf("Enter the first string..!\n");
do
{
scanf_s("%c", &ch1);
if (ch1 != '\n')
{
size1++;
str1 = (char*)realloc(str1, size1 * sizeof(char));
*(str1 + i) = ch1;
*(str1 + i + 1) = '\0';
i++;
count1++;
}
} while (ch1 != '\n');
printf("The string is :%s\n", str1);
i = 0;
//STRING 2
printf("Enter the second string..!\n");
do
{
scanf_s("%c", &ch2);
if (ch2 != '\n')
{
size2++;
str2 = (char*)realloc(str2, size2 * sizeof(char));
*(str2 + i) = ch2;
*(str2 + i + 1) = '\0';
i++;
count2++;
}
} while (ch2 != '\n');
printf("The string is :%s\n", str2);
i = 0;
int d, flag = 0, j = 0;
while (*(str1 + i) != '\0' || *(str2 + j) != '\0')
{
if (*(str1 + i) == *(str2 + j))
{
i++;
j++;
}
else
{
d = *(str1 + i) - *(str2 + j);
if (d < 0)
{
d = (d * (-2)) + d;
}
flag = 1;
break;
}
}
if (flag == 0)
{
printf("The strings are equal");
}
else
{
printf("The strings are not equal and difference between the mismatch character is 
%d",
d);
}
}

46.Write a C program which accept two strings from user and compare only first N characters of 
two strings. If both strings are equal till first N characters then return 0 otherwise return difference 
between first mismatch character. (Using Dynamic Memory Allocation)
Eg:
Input String1: Ramayan
Input String2: Ramanacharya
Input of N: 4
Output: Both strings are equal.
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str1 = NULL;
char* str2 = NULL;
int i = 0, size1 = 1, size2 = 1, t;
char ch1, ch2;
str1 = (char*)malloc(sizeof(char));
str2 = (char*)malloc(sizeof(char));
*str1 = '\0';
*str2 = '\0';
printf("Enter the first string..!\n");
do
{
scanf_s("%c", &ch1);
if (ch1 != '\n')
{
size1++;
str1 = (char*)realloc(str1, size1 * sizeof(char));
*(str1 + i) = ch1;
*(str1 + i + 1) = '\0';
i++;
}
} while (ch1 != '\n');
printf("The string is :%s\n", str1);
i = 0;
//STRING 2
printf("Enter the second string..!\n");
do
{
scanf_s("%c", &ch2);
if (ch2 != '\n')
{
size2++;
str2 = (char*)realloc(str2, size2 * sizeof(char));
*(str2 + i) = ch2;
*(str2 + i + 1) = '\0';
i++;
}
} while (ch2 != '\n');
printf("The string is :%s\n", str2);
printf("Enter the number..\n");
scanf_s("%d", &t);
i = 0;
int d, flag = 0;
while (i != t)
{
if (*(str1 + i) == *(str2 + i))
{
i++;
}
else
{
d = *(str1 + i) - *(str2 + i);
if (d < 0)
{
d = (d * (-2)) + d;
}
flag = 1;
break;
}
}
if (flag == 0)
{
printf("The strings are equal..");
}
else
{
printf("Strings are not equal and the difference between mismatch character is %d ", 
d);
}
}

47.Write a C program to find the sum of contiguous subarray within a one dimensional array of 
numbers which has the largest sum(Using Dynamic Memory Allocation)*/
48.Write a C program which accept two strings from user and compare two strings without case 
sensitivity. If both strings are equal then return 0 otherwise return difference between first 
mismatch character.
(Using Dynamic Memory Allocation)
Eg:
Input String1: india Is mY cOuntry
Input String2: INDIA is MY countrY
Output: Both strings are equal.
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str1 = NULL;
char* str2 = NULL;
int i = 0, size1 = 1, size2 = 1;
char ch1, ch2;
str1 = (char*)malloc(sizeof(char));
str2 = (char*)malloc(sizeof(char));
*str1 = '\0';
*str2 = '\0';
printf("Enter the first string..!\n");
do
{
scanf_s("%c", &ch1);
if (ch1 != '\n')
{
size1++;
str1 = (char*)realloc(str1, size1 * sizeof(char));
*(str1 + i) = ch1;
*(str1 + i + 1) = '\0';
i++;
}
} while (ch1 != '\n');
//printf("The string is :%s\n", str1);
i = 0;
//STRING 2
printf("Enter the second string..!\n");
do
{
scanf_s("%c", &ch2);
if (ch2 != '\n')
{
size2++;
str2 = (char*)realloc(str2, size2 * sizeof(char));
*(str2 + i) = ch2;
*(str2 + i + 1) = '\0';
i++;
}
} while (ch2 != '\n');
//printf("The string is :%s\n", str2);
i = 0;
int j = 0, n;
while (*(str1 + j) != '\0')
{
n = 0;
n = *(str1 + j);
if (n >= 65 && n <= 90)
{
n = n + 32;
}
*(str1 + i) = n;
i++;
j++;
}
//printf("%s\n", str1);
i = 0;
j = 0;
while (*(str2 + j) != '\0')
{
n = 0;
n = *(str2 + j);
if (n >= 65 && n <= 90)
{
n = n + 32;
}
*(str2 + i) = n;
i++;
j++;
}
//printf("%s", str2);
int flag = 0, d;
i = 0;
j = 0;
while (*(str1 + i) != '\0' || *(str2 + j) != '\0')
{
if (*(str1 + i) == *(str2 + j))
{
i++;
j++;
}
else
{
d = *(str1 + i) - *(str2 + j);
if (d < 0)
{
d = (d * (-2)) + d;
}
flag = 1;
break;
}
}
if (flag == 0)
{
printf("The strings are equal");
}
else
{
printf("The strings are not equal and difference between the mismatch character is 
%d",
d);
}
}

49.Write a C program which accept string from user and then reverse the string till first N 
characters without taking another string. (Using Dynamic
Memory Allocation)
Eg:
Input String: India is my country
Input of N: 8
Output : m si aidnIy country
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str1 = NULL;
int i = 0, size = 1;
str1 = (char*)malloc(sizeof(char));
*str1 = '\0';
char ch;
printf("Enter the string..\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str1 = (char*)realloc(str1, size * sizeof(char));
*(str1 + i) = ch;
*(str1 + i + 1) = '\0';
i++;
}
} while (ch != '\n');
printf("The string is :%s\n", str1);
int n;
printf("Enter the number...");
scanf_s("%d", &n);
i = 0;
while (i != n - 1)
{
i++;
}
while (i >= 0)
{
printf("%c", *(str1 + i));
i--;
}
while (i != n)
{
i++;
}
while (*(str1 + i) != '\0')
{
printf("%c", *(str1 + i));
i++;
}
}

50.Write a C program which accept string from user and then accept range and reverse the string 
in that range without taking another string. 
(Using Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str1 = NULL;
int i = 0, size = 1;
str1 = (char*)malloc(sizeof(char));
*str1 = '\0';
char ch;
printf("Enter the string..\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str1 = (char*)realloc(str1, size * sizeof(char));
*(str1 + i) = ch;
*(str1 + i + 1) = '\0';
i++;
}
} while (ch != '\n');
printf("The string is :%s\n", str1);
int n1, n2;
printf("Enter the first number..\n");
scanf_s("%d", &n1);
printf("Enter the second number..\n");
scanf_s("%d", &n2);
n1 = n1 - 1;
n2 = n2 - 1;
i = 0;
while (i != n1)
{
printf("%c", *(str1 + i));
i++;
}
while (i != n2)
{
i++;
}
while (i != n1 - 1)
{
printf("%c", *(str1 + i));
i--;
}
while (i != n2 + 1)
{
i++;
}
while (*(str1 + i) != '\0')
{
printf("%c", *(str1 + i));
i++;
}
}

51. Write a C program to find the maximum sum of a subsequent numbers in given array. (Using 
Dynamic Memory Allocation)

52.Write a C program which accept string from user and reverse words from that string which are 
of even length. (Using Dynamic Memory Allocation)
Eg:
Input String: India is my country. I love my country.
Output String: India si ym .yrtnuoc I evol ym . Yrtnuoc
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str1 = NULL;
int i = 0, size = 1;
str1 = (char*)malloc(sizeof(char));
*str1 = '\0';
char ch;
printf("Enter the string..\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str1 = (char*)realloc(str1, size * sizeof(char));
*(str1 + i) = ch;
*(str1 + i + 1) = '\0';
i++;
}
} while (ch != '\n');
printf("The string is :%s\n", str1);
i = 0;
int count = 0, j;
while (*(str1 + i) != '\0')
{
count = 0;
while (*(str1 + i) != ' ' && *(str1 + i) != '\0')
{
count++;
i++;
}
if (count % 2 == 0)
{
j = i - 1;
while (*(str1 + j) != ' ' && j >= 0)
{
printf("%c", *(str1 + j));
j--;
}
if (*(str1 + i) == ' ')
{
printf(" ");
i++;
}
}
else
{
j = i - 1;
while (*(str1 + j) != ' ' && j >= 0)
{
j--;
}
j++;
while (*(str1 + j) != ' ' && *(str1 + j) != '\0')
{
printf("%c", *(str1 + j));
j++;
}
if (*(str1 + i) == ' ')
{
printf(" ");
i++;
}
}
}
}

53.Write a C program which accept string from user and check whether string is palindrome or 
not. (Using Dynamic Memory Allocation)
Eg:
Input String: level
Output String: String is palindrome.
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str1 = NULL;
int i = 0, size = 1;
str1 = (char*)malloc(sizeof(char));
*str1 = '\0';
char ch;
printf("Enter the string..\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str1 = (char*)realloc(str1, size * sizeof(char));
*(str1 + i) = ch;
*(str1 + i + 1) = '\0';
i++;
}
} while (ch != '\n');
printf("The string is :%s\n", str1);
i = 0;
int j = -1, flag = 0;
while (*(str1 + i) != '\0')
{
j++;
i++;
}
i = 0;
while (i != j)
{
if (*(str1 + i) == *(str1 + j))
{
i++;
j--;
}
else
{
printf("the string is not palindrome");
flag = 1;
break;
}
}
if (flag == 0)
{
printf("the string is palindrome..");
}
}

54. An array consist of Integers. Write a C program to count the number of elements less than, 
greater than and equal to zero.(Using Dynamic Memory Allocation)

55.Write a C program to count number of alphabates, spaces and words in given string. (Using 
Dynamic Memory Allocation)
#include<stdio.h>
#include<stdlib.h>
void main()
{
char* str1 = NULL;
int i = 0, size = 1;
str1 = (char*)malloc(sizeof(char));
*str1 = '\0';
char ch;
printf("Enter the string..\n");
do
{
scanf_s("%c", &ch);
if (ch != '\n')
{
size++;
str1 = (char*)realloc(str1, size * sizeof(char));
*(str1 + i) = ch;
*(str1 + i + 1) = '\0';
i++;
}
} while (ch != '\n');
printf("The string is :%s\n", str1);
int count = 0, counta = 0, counts = 0, countw = 0;
i = 0;
while (*(str1 + i) != '\0')
{
if (*(str1 + i) == ' ')
{
counts++;
}
if (*(str1 + i) >= 'a' && *(str1 + i) <= 'z')
{
counta++;
}
i++;
}
i = 0;
while (*(str1 + i) != '\0')
{
count = 0;
if (*(str1 + i) >= '0' && *(str1 + i) <= '9')
{
}
else
{
while (*(str1 + i) != ' ' && *(str1 + i) != '\0')
{
count++;
i++;
}
}
if (count > 1)
{
countw++;
}
i++;
}
printf("Total alphabates %d\n", counta);
printf("Total spaces %d\n", counts);
printf("Total words %d\n", countw);
}
